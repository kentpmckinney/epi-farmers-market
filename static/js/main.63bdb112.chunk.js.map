{"version":3,"sources":["leaf.png","components/InfoDisplay/InfoDisplay.jsx","components/MonthDisplay/MonthDisplay.jsx","components/MonthInfoDisplay/MonthInfoDisplay.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","InfoDisplay","props","Fragment","className","label","info","MonthDisplay","active","onClick","onChangeHandler","MonthInfoDisplay","changeMonth","month","setState","selectedMonth","render","state","produceList","this","data","forEach","item","selection","join","React","Component","marketSchedule","day","location","hours","booth","availableProduce","App","d","Date","weekday","m","date","getDate","year","getFullYear","getMonth","getDay","src","plant","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,qNCa5BC,MAVf,SAAqBC,GACnB,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,aAAaF,EAAMG,OAClC,6BACA,yBAAKD,UAAU,aAAY,gCAASF,EAAMI,S,kCCiBjCC,MAtBf,SAAsBL,GAElB,OACE,kBAAC,IAAMC,SAAP,KACE,wBAAIC,UAAU,sBACZ,wBAAIA,UAA4B,YAAjBF,EAAMM,OAAuB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,aAAjG,WACA,wBAAIN,UAA4B,aAAjBF,EAAMM,OAAwB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,WAAlG,SACA,wBAAIN,UAA4B,UAAjBF,EAAMM,OAAqB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,WAA/F,SACA,wBAAIN,UAA4B,QAAjBF,EAAMM,OAAmB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,SAA7F,OACA,wBAAIN,UAA4B,SAAjBF,EAAMM,OAAoB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,UAA9F,QACA,wBAAIN,UAA4B,SAAjBF,EAAMM,OAAoB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,UAA9F,QACA,wBAAIN,UAA4B,WAAjBF,EAAMM,OAAsB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,YAAhG,UACA,wBAAIN,UAA4B,cAAjBF,EAAMM,OAAyB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,eAAnG,aACA,wBAAIN,UAA4B,YAAjBF,EAAMM,OAAuB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,aAAjG,WACA,wBAAIN,UAA4B,aAAjBF,EAAMM,OAAwB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,cAAlG,YACA,wBAAIN,UAA4B,aAAjBF,EAAMM,OAAwB,SAAW,GAAIC,QAAS,WAAOP,EAAMQ,gBAAgB,cAAlG,eCkCKC,G,wDA9Cb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IAMRU,YAAc,SAACC,GACb,EAAKC,SAAS,CAACC,cAAeF,IAC9B,EAAKG,UAPL,EAAKC,MAAQ,CACXF,cAAe,WAHA,E,qDAYT,IAAD,OAEHG,EAAc,GAOlB,OANAC,KAAKjB,MAAMkB,KAAKC,SAAS,SAACC,GACpBA,EAAKT,QAAU,EAAKI,MAAMF,gBAC5BG,EAAcI,EAAKC,UAAUC,KAAK,UAKpC,kBAAC,IAAMrB,SAAP,KACE,kBAAC,EAAD,CACEE,MAAK,iCACLC,KACE,kBAAC,IAAMH,SAAP,KACE,6BACE,kBAAC,EAAD,CACEK,OAAQW,KAAKF,MAAMF,cACnBL,gBAAiBS,KAAKP,eAG1B,6BACA,yBAAKR,UAAU,cACZc,W,GApCcO,IAAMC,Y,gBCC/BC,G,MAAiB,CACrB,CACGC,IAAK,SACLC,SAAU,sBACVC,MAAO,kBACPC,MAAO,MAEV,CACGH,IAAK,SACLC,SAAU,4BACVC,MAAO,mBACPC,MAAO,MAEV,CACGH,IAAK,UACLC,SAAU,YACVC,MAAO,kBACPC,MAAO,MAEV,CACGH,IAAK,YACLC,SAAU,iBACVC,MAAO,mBACPC,MAAO,MAEV,CACEH,IAAK,WACLC,SAAU,qBACVC,MAAO,kBACPC,MAAO,MAEV,CACGH,IAAK,SACLC,SAAU,uBACVC,MAAO,MACPC,MAAO,OAEX,CACIH,IAAK,WACLC,SAAU,YACVC,MAAO,mBACPC,MAAO,QAIJC,EAAmB,CACxB,CACGnB,MAAO,UACPU,UAAW,CACR,SACA,YACA,QACA,SACA,YACA,SACA,WACA,YAGN,CACGV,MAAO,WACPU,UAAW,CACR,SACA,YACA,QACA,SACA,YACA,SACA,aAGN,CACGV,MAAO,QACPU,UAAW,CACR,SACA,YACA,QACA,UACA,SACA,YACA,SACA,aAGN,CACGV,MAAO,QACPU,UAAW,CACR,SACA,YACA,QACA,UACA,YACA,SACA,UACA,YACA,SACA,aAGN,CACGV,MAAO,MACPU,UAAW,CACR,SACA,YACA,QACA,UACA,YACA,cACA,SACA,UACA,WACA,aAGN,CACGV,MAAO,OACPU,UAAW,CACR,SACA,YACA,QACA,UACA,eACA,WACA,cACA,eACA,YACA,WACA,cACA,WACA,UACA,YACA,WACA,WACA,WAGN,CACGV,MAAO,OACPU,UAAW,CACR,SACA,YACA,QACA,UACA,WACA,eACA,cACA,WACA,SACA,aACA,UACA,cACA,eACA,WACA,QACA,WACA,kBACA,UACA,UACA,cACA,WACA,WACA,SACA,cACA,WACA,UACA,YACA,WACA,WACA,SACA,YAGN,CACGV,MAAO,SACPU,UAAW,CACR,SACA,WACA,eACA,cACA,WACA,SACA,aACA,UACA,QACA,QACA,cACA,UACA,eACA,WACA,QACA,WACA,kBACA,UACA,UACA,cACA,OACA,WACA,WACA,SACA,cACA,WACA,UACA,YACA,SACA,OACA,UACA,WACA,WACA,SACA,YAGN,CACGV,MAAO,YACPU,UAAW,CACR,SACA,cACA,SACA,SACA,UACA,QACA,QACA,cACA,WACA,WACA,kBACA,UACA,UACA,cACA,OACA,WACA,WACA,SACA,cACA,WACA,UACA,YACA,SACA,OACA,UACA,WACA,WACA,SACA,YAGN,CACGV,MAAO,UACPU,UAAW,CACR,SACA,SACA,YACA,SACA,UACA,QACA,WACA,WACA,kBACA,UACA,UACA,cACA,OACA,WACA,WACA,SACA,cACA,WACA,UACA,YACA,SACA,OACA,UACA,WACA,WACA,WACA,SACA,YAGN,CACGV,MAAO,WACPU,UAAW,CACR,SACA,YACA,QACA,WACA,UACA,cACA,SACA,YACA,SACA,WACA,SACA,YAGN,CACGV,MAAO,WACPU,UAAW,CACR,SACA,YACA,QACD,WACC,UACA,cACA,SACA,YACA,SACA,WACA,aA+EOU,MA1Ef,WAEE,IAAIC,EAAI,IAAIC,KACRC,EAAU,GACdA,EAAQ,GAAK,SACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,UACbA,EAAQ,GAAK,YACbA,EAAQ,GAAK,WACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,WAEb,IAAIC,EAAI,GACRA,EAAE,GAAK,UACPA,EAAE,GAAK,WACPA,EAAE,GAAK,QACPA,EAAE,GAAK,QACPA,EAAE,GAAK,MACPA,EAAE,GAAK,OACPA,EAAE,GAAK,OACPA,EAAE,GAAK,SACPA,EAAE,GAAK,YACPA,EAAE,GAAK,UACPA,EAAE,IAAM,WACRA,EAAE,IAAM,WAER,IAAMC,EAAOJ,EAAEK,UACTC,EAAON,EAAEO,cACT5B,EAAQwB,EAAEH,EAAEQ,YACZd,EAAMQ,EAAQF,EAAES,UAClBd,EAAW,GACXC,EAAQ,GACRC,EAAQ,GAEZJ,EAAeN,SAAQ,SAASC,GAC1BA,EAAKM,MAAQA,IACfC,EAAWP,EAAKO,SAChBC,EAAQR,EAAKQ,MACbC,EAAQT,EAAKS,UAIjB,IAAIb,EAAc,GAOlB,OANAc,EAAiBX,SAAQ,SAASC,GAC5BA,EAAKT,QAAUA,IACjBK,EAAcI,EAAKC,UAAUC,KAAK,UAKpC,yBAAKpB,UAAY,aACf,4BAAI,yBAAKwC,IAAKC,IAAOzC,UAAU,cAA/B,mBAEA,6BACA,kBAAC,EAAD,CACEC,MAAK,mCAA8BuB,EAA9B,aAAsCU,EAAtC,YAA8CzB,EAA9C,aAAwD2B,EAAxD,KACLlC,KAAM,6BAAK,8BAAM,qCAAN,IAAqBwB,GAAa,6BAAK,8BAAM,wCAAN,IAAwBD,GAAgB,6BAAK,8BAAM,qCAAN,IAAqBE,MAEtH,6BACA,6BACA,kBAAC,EAAD,CACE1B,MAAK,kBACLC,KAAMY,IAER,6BACA,6BACA,kBAAC,EAAD,CACEb,MAAK,iCACLe,KAAMY,MCxXMc,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCZNC,IAASlC,OACP,kBAAC,IAAMmC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63bdb112.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/leaf.2034149b.png\";","import React from 'react';\nimport './InfoDisplay.css'\n\nfunction InfoDisplay(props) {\n  return (\n    <React.Fragment>\n      <div className='infolabel'>{props.label}</div>\n      <br/>\n      <div className='infopanel'><center>{props.info}</center></div>\n    </React.Fragment>\n  );\n}\n\nexport default InfoDisplay;","import React from 'react';\nimport './MonthDisplay.css'\n\nfunction MonthDisplay(props) {\n\n    return (\n      <React.Fragment>\n        <ul className=\"monthlist noselect\">\n          <li className={props.active === 'January' ? 'active' : ''} onClick={() => {props.onChangeHandler('January')}}>January</li>\n          <li className={props.active === 'February' ? 'active' : ''} onClick={() => {props.onChangeHandler('March')}}>March</li>\n          <li className={props.active === 'April' ? 'active' : ''} onClick={() => {props.onChangeHandler('April')}}>April</li>\n          <li className={props.active === 'May' ? 'active' : ''} onClick={() => {props.onChangeHandler('May')}}>May</li>\n          <li className={props.active === 'June' ? 'active' : ''} onClick={() => {props.onChangeHandler('June')}}>June</li>\n          <li className={props.active === 'July' ? 'active' : ''} onClick={() => {props.onChangeHandler('July')}}>July</li>\n          <li className={props.active === 'August' ? 'active' : ''} onClick={() => {props.onChangeHandler('August')}}>August</li>\n          <li className={props.active === 'September' ? 'active' : ''} onClick={() => {props.onChangeHandler('September')}}>September</li>\n          <li className={props.active === 'October' ? 'active' : ''} onClick={() => {props.onChangeHandler('October')}}>October</li>\n          <li className={props.active === 'November' ? 'active' : ''} onClick={() => {props.onChangeHandler('November')}}>November</li>\n          <li className={props.active === 'December' ? 'active' : ''} onClick={() => {props.onChangeHandler('December')}}>December</li>\n        </ul>\n      </React.Fragment>\n    );\n  \n}\n\nexport default MonthDisplay;","import React from 'react';\nimport InfoDisplay from '../InfoDisplay/InfoDisplay'\nimport MonthDisplay from '../MonthDisplay/MonthDisplay'\nimport './MonthInfoDisplay.css'\n\nclass MonthInfoDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedMonth: 'January'\n    }\n  }\n\n  changeMonth = (month) => {\n    this.setState({selectedMonth: month});\n    this.render()\n  }\n\n  render() {\n\n    let produceList = ''\n    this.props.data.forEach( (item) => {\n      if (item.month === this.state.selectedMonth) {\n        produceList = item.selection.join(', ');\n      }\n    })\n\n    return (\n      <React.Fragment>\n        <InfoDisplay\n          label={`The Produce we Offer, by Month`}\n          info={\n            <React.Fragment>\n              <div>\n                <MonthDisplay\n                  active={this.state.selectedMonth}\n                  onChangeHandler={this.changeMonth}\n                />\n              </div>\n              <br />\n              <div className='limitwidth'>\n                {produceList}\n              </div>\n            </React.Fragment>\n          }\n        />\n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default MonthInfoDisplay;","import React from 'react';\nimport InfoDisplay from './InfoDisplay/InfoDisplay'\nimport MonthInfoDisplay from './MonthInfoDisplay/MonthInfoDisplay'\nimport plant from '../leaf.png'\nimport './App.css';\n\nconst marketSchedule = [  \n  {  \n     day: \"Sunday\",\n     location: \"Lents International\",\n     hours: \"9:00am - 2:00pm\",\n     booth: \"4A\"\n  },\n  {  \n     day: \"Monday\",\n     location: \"Pioneer Courthouse Square\",\n     hours: \"10:00am - 2:00pm\",\n     booth: \"7C\"\n  },\n  {  \n     day: \"Tuesday\",\n     location: \"Hillsboro\",\n     hours: \"5:00pm - 8:30pm\",\n     booth: \"1F\"\n  },\n  {  \n     day: \"Wednesday\",\n     location: \"Shemanski Park\",\n     hours: \"10:00am - 2:00pm\",\n     booth: \"3E\"\n  },\n  {  \n    day: \"Thursday\",\n    location: \"Northwest Portland\",\n    hours: \"2:00pm - 6:00pm\",\n    booth: \"6D\"\n },\n {\n    day: \"Friday\",\n    location: \"We Are Closed Today!\",\n    hours: \"n/a\",\n    booth: \"n/a\"\n},\n{\n    day: \"Saturday\",\n    location: \"Beaverton\",\n    hours: \"10:00am - 1:30pm\",\n    booth: \"9G\"\n}\n];\n\n const availableProduce = [  \n  {  \n     month: \"January\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"February\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\"\n     ]\n  },\n  {  \n     month: \"March\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\"\n     ]\n  },\n  {  \n     month: \"April\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Asparagus\",\n        \"Garlic\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\"\n     ]\n  },\n  {  \n     month: \"May\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Asparagus\",\n        \"Cauliflower\",\n        \"Garlic\",\n        \"Lettuce\",\n        \"Potatoes\",\n        \"Radishes\"\n     ]\n  },\n  {  \n     month: \"June\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Blackberries\",\n        \"Cherries\",\n        \"Raspberries\",\n        \"Strawberries\",\n        \"Asparagus\",\n        \"Broccoli\",\n        \"Cauliflower\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Potatoes\",\n        \"Radishes\",\n        \"Squash\"\n     ]\n  },\n  {  \n     month: \"July\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Apricots\",\n        \"Blackberries\",\n        \"Blueberries\",\n        \"Cherries\",\n        \"Melons\",\n        \"Nectarines\",\n        \"Peaches\",\n        \"Raspberries\",\n        \"Strawberries\",\n        \"Tomatoes\",\n        \"Beets\",\n        \"Broccoli\",\n        \"Brussel Sprouts\",\n        \"Cabbage\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Cucumber\",\n        \"Eggplant\",\n        \"Garlic\",\n        \"Green Beans\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Potatoes\",\n        \"Radishes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"August\",\n     selection: [  \n        \"Apples\",\n        \"Apricots\",\n        \"Blackberries\",\n        \"Blueberries\",\n        \"Cherries\",\n        \"Melons\",\n        \"Nectarines\",\n        \"Peaches\",\n        \"Pears\",\n        \"Plums\",\n        \"Raspberries\",\n        \"Rhubarb\",\n        \"Strawberries\",\n        \"Tomatoes\",\n        \"Beets\",\n        \"Broccoli\",\n        \"Brussel Sprouts\",\n        \"Cabbage\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Corn\",\n        \"Cucumber\",\n        \"Eggplant\",\n        \"Garlic\",\n        \"Green Beans\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Peas\",\n        \"Peppers\",\n        \"Potatoes\",\n        \"Radishes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"September\",\n     selection: [  \n        \"Apples\",\n        \"Blueberries\",\n        \"Grapes\",\n        \"Melons\",\n        \"Peaches\",\n        \"Pears\",\n        \"Plums\",\n        \"Raspberries\",\n        \"Tomatoes\",\n        \"Broccoli\",\n        \"Brussel Sprouts\",\n        \"Cabbage\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Corn\",\n        \"Cucumber\",\n        \"Eggplant\",\n        \"Garlic\",\n        \"Green Beans\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Peas\",\n        \"Peppers\",\n        \"Potatoes\",\n        \"Radishes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"October\",\n     selection: [  \n        \"Apples\",\n        \"Grapes\",\n        \"Hazelnuts\",\n        \"Melons\",\n        \"Peaches\",\n        \"Pears\",\n        \"Tomatoes\",\n        \"Broccoli\",\n        \"Brussel Sprouts\",\n        \"Cabbage\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Corn\",\n        \"Cucumber\",\n        \"Eggplant\",\n        \"Garlic\",\n        \"Green Beans\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Peas\",\n        \"Peppers\",\n        \"Potatoes\",\n        \"Pumpkins\",\n        \"Radishes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"November\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Broccoli\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"December\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n       \"Broccoli\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\",\n        \"Turnips\"\n     ]\n  }\n];\n\nfunction App() {\n\n  var d = new Date();\n  var weekday = [];\n  weekday[0] = \"Sunday\";\n  weekday[1] = \"Monday\";\n  weekday[2] = \"Tuesday\";\n  weekday[3] = \"Wednesday\";\n  weekday[4] = \"Thursday\";\n  weekday[5] = \"Friday\";\n  weekday[6] = \"Saturday\";\n\n  var m = [];\n  m[0] = \"January\";\n  m[1] = \"February\";\n  m[2] = \"March\";\n  m[3] = \"April\";\n  m[4] = \"May\";\n  m[5] = \"June\";\n  m[6] = \"July\";\n  m[7] = \"August\";\n  m[8] = \"September\";\n  m[9] = \"October\";\n  m[10] = \"November\";\n  m[11] = \"December\";\n\n  const date = d.getDate();\n  const year = d.getFullYear();\n  const month = m[d.getMonth()];\n  const day = weekday[d.getDay()];\n  let location = ''\n  let hours = ''\n  let booth = ''\n\n  marketSchedule.forEach(function(item){\n    if (item.day === day) {\n      location = item.location\n      hours = item.hours\n      booth = item.booth\n    }\n  })\n\n  let produceList = ''\n  availableProduce.forEach(function(item){\n    if (item.month === month) {\n      produceList = item.selection.join(', ');\n    }\n  })\n\n  return (\n    <div className = 'container'>\n      <h1><img src={plant} className='headerimg'/> Avery Organics</h1>\n      \n      <br/>\n      <InfoDisplay\n        label={`Today's Market Location (${day}, ${date} ${month}, ${year})`}\n        info={<div><span><b>Hours:</b> {hours}</span><br/><span><b>Location:</b> {location}</span><br/><span><b>Booth:</b> {booth}</span></div>}\n      />\n      <br/>\n      <br/>\n      <InfoDisplay\n        label={`Today's Produce`}\n        info={produceList}\n      />\n      <br/>\n      <br/>\n      <MonthInfoDisplay\n        label={`The Produce We Offer, by Month`}\n        data={availableProduce}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}